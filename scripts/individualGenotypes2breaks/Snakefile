configfile: "config.yaml"

import os

wild, = glob_wildcards(os.path.join(config["RAW"], "{sample, .*vcf}"))
chroms = [e for e in range(1, 25)]


rule all:
    input:
        expand(os.path.join(config["outdir"], "{file}", "{f}.{chr}.corrected.refined.breaks.txt"),f=wild, chr=chroms),
        expand(os.path.join(config["outdir"], "{file}", "{file}.{chr}.rough_COs.recomb.txt"),file=wild, chr=chroms)


rule sort:
    input:
        os.path.join(config["RAW"], "{file}")
    output:
        os.path.join(config["RAW"], "{file}.sorted")
    priority:
        30
    shell:
        "sort -k 1,1n -k 2,2n {input} > {output}"

rule short:
    input:
        rules.sort.output
    output:
        os.path.join(config["RAW"], "{file}.{chr}.short")
    params:
        chr = "{chr}"
    shell:
        "awk '$1 == {params.chr} {{print $0}}' {input} > {output}"
    
rule caller:
    input:
        rules.short.output
    output:
        os.path.join(config["outdir"], "{file}", "{file}.{chr}.allele_co.txt")
    priority:
        30
    shell:
        "java -jar base_caller.jar -r {input} -o {output} -n bi"

# get win averages
rule estimate:
    input:
        rules.short.output
    output:
        os.path.join(config["outdir"], "{file}", "{file}.{chr}.frequencies_for_hmm.txt")
    params:
        winsize = config["winsize"]
    priority:
        4
    shell:
        "java -jar allele_freq_estimator.jar -r {input} -o {output} -n bi -w {params.winsize}"

# get beta mixtures
rule beta:
    input:
        rules.estimate.output
    output:
        os.path.join(config["outdir"], "{file}", "{file}.{chr}bmm.intersections.txt")
    priority:
        5
    shell:
        "Rscript --vanilla beta_mixture_model.R {input}  {output}"


# 5 get HMM probablities
rule prep_prob:
    input:
        vcf = rules.short.output,
        genomeSize = config["genomeSizeFile"],
        base = rules.caller.output
    output:
        os.path.join(config["outdir"], "{file}", "{file}.{chr}file_for_probabilities.txt")
    params:        
        ident = "{file}.{chr}".split(".")[0]
    priority:
        60
    shell:
        "perl prep_prob.pl -s {params.ident} -m {input.vcf} -b {input.base} -c {input.genomeSize} -o {output}"
          
# 6 Calculate transmission and emission probabilities for the HMM
rule hmm_prob:
    input:
        freq = rules.estimate.output,
        hmm_prob = rules.prep_prob.output,
        genomeSize = config["genomeSizeFile"],
        beta = rules.beta.output
    output:
        model = os.path.join(config["outdir"], "{file}", "{file}.{chr}hmm_model"),
        sliding = os.path.join(config["outdir"], "{file}", "{file}.{chr}_sliding_window.breaks.txt")
    priority:
        70
    shell:
        "tmp={output.sliding}; \
        tmp1=${{tmp%_*}}; \
        outShort=${{tmp1%_*}}; \
        perl hmm_prob.pl -s {input.freq} -p {input.hmm_prob} -o $outShort -a {input.beta} -c {input.genomeSize}"


## 7 apply HMM
rule hmm:
    input:
        call = rules.caller.output,
        model = rules.hmm_prob.output.model
    output:
        hmm = protected(os.path.join(config["outdir"], "{file}", "{file}.{chr}.hmm.out.txt"))
    priority:
        80
    shell:
        "java -jar hmm_play.jar -r {input.call} -o {output.hmm} -t bi -z {input.model}"

## 8 get co
rule prep_co:
    input:
        vcf = rules.short.output,
        genomeSize = config["genomeSizeFile"],    
        hmm = rules.hmm.output
    output:
        total = os.path.join(config["outdir"], "{file}", "{file}.{chr}.rough_COs.txt"),
        partial = os.path.join(config["outdir"], "{file}", "{file}.{chr}.rough_COs.breaks.txt")
    params:
        ident = "{file}.{chr}".split(".")[0]
    priority:
        90
    shell:
        "perl prepare_break.pl -s {params.ident} -m {input.vcf} -b {input.hmm} -c  {input.genomeSize} -o {output.total}"

## 9 refine co
rule refine:
    input:
        vcf = rules.short.output,
        breaks = rules.prep_co.output.partial
    output:
        protected(os.path.join(config["outdir"], "{file}", "{file}.{chr}.rough_COs.refined.recomb.txt")),
        protected(os.path.join(config["outdir"], "{file}", "{file}.{chr}.rough_COs.refined.breaks.txt")),
        protected(os.path.join(config["outdir"], "{file}", "{file}.{chr}.rough_COs.recomb.txt"))
    priority:
        100
    shell:
        "perl refine_recombination_break.pl {input.vcf} {input.breaks}"

## 10 smooth co
rule smoother:
    input:
        breaks = rules.prep_co.output.partial
    output:
        protected(os.path.join(config["outdir"], "{file}", "{file}.{chr}.corrected.refined.breaks.txt"))
    shell:
        "perl breaks_smoother.pl -b {input.breaks} -o {output}"


## useful file
#os.path.join(config["outdir"], "{file}", config["outdir"], "{file}", $id"rough_COs.refined.breaks.txt"
#os.path.join(config["outdir"], "{file}", config["outdir"], "{file}", $id"corrected.refined.breaks.txt"
#os.path.join(config["outdir"], "{file}", config["outdir"], "{file}", $id"hmm.out.txt"
##  remove unused files
#ls os.path.join(config["outdir"], "{file}", config["outdir"], "{file}",  | grep -v "corrected" | grep -v "rough_COs" | grep -v "hmm.out.txt$"  | grep -v "chicken_chrSize.txt" | while read var; do rm os.path.join(config["outdir"], "{file}", config["outdir"], "{file}", $var ;done
